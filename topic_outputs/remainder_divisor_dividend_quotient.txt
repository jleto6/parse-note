Key advantage today: Works properly for 2’s complement numbers without requiring special fix for sign! Division: Paper and Pencil • “Paper and pencil” example • 20 ÷ 6 = 3 Remainder 2 00011 Quotient 110 10100 Dividend 10 101 1010 - 110_ 1000 - 110 10 Remainder Dividend = Quotient

---

* Divisor + Remainder Divisor Division: Paper and Pencil • “Paper and pencil” example • 20 ÷ 6 = 3 Remainder 2 00011 Quotient 110 10100 Dividend 10 101 1010 - 110_ 1000 - 110 10 Remainder Divisor Algorithm: If Partial Remainder > Divisor then Quotient bit = 1; Remainder

---

= Remainder – Divisor else Quotient bit = 0 Shift down next dividend bit Division Hardware • Same as Multiplication Hardware! • 32-bit Divisor reg, 32 -bit ALU, 64-bit Remainder reg • Dividend stored in remainder register, Quotient formed in remainder register Write 32 bits 64 bits Shift left Shift

---

right Remainder 32-bit ALU Divisor Control test Figure 3.11 from text Division Algorithm Start Done. Shift left half of Remainder right 1 bit Test Remainder 3a. Shift the Remainder register to the left, setting the new rightmost bit to 1 32nd repetition? Start Remainder < 0 No: < 32 repetitions

---

Yes: 32 repetitions 3b. Restore the original value by adding the Divisor register to the left half of the Remainder register and place the sum in the left half of the Remainder register. Also shift the Remainder register to the left, setting the new rightmost bit to 0 2. Subtract

---

the Divisor register from the left half of the Remainder register and place the result in the left half of the Remainder register Remainder 0 1. Place Dividend in Remainder register. Shift the Remainder register left 1 bit –> Figure from a previous version of the text Takes n Steps

---

for n-bit Quotient and Remainder Division Example • Example: 14 ÷ 3 = 4; remainder 2. Iter Step Remainder Divisor Action 0 0 0001 1100 0011 Initialize 1 1 1110 1100 0011 Subtract: Remainder<0 1 2b. 0011 1000 0011 Restore; shift in 0 2 1 0000 1000 0011 Subtract; Remainder=0

---

2 2a. 0001 0001 0011 Shift in a 1 3 1 1110 0001 0011 Subtract: Remainder<0 3 2b. 0010 0010 0011 Restore; shift in 0 4 1 1111 0010 0011 Subtract: Remainder<0 4 2b. 0100 0100 0011 Restore; shift in 0 3 0010 0100 0011 Shift remainder right Rem. Quot.

---

divisor and dividend • Convert divisor and dividend to positive • Complement quotient and remainder if necessary • Dividend and Remainder are defined to have same sign • Quotient negated if Divisor sign and Dividend sign disagree Beyond Integers • Real numbers • Called “float” values • Computer arithmetic that