read and write registers, we need a register file • R-types read two registers and write one register • Memory-reference instructions read one register • Also access data memory Processor Overview Data “flows” through memory and functional units Processor Overview Can’t just join wires together Use multiplexers Processor Overview Multiplexers

---

require selection signals Control Signals Signals • Information encoded in binary • Low voltage = 0, High voltage = 1 • One wire per bit • Multi-bit data encoded on multi-wire buses Logic Design Review • Combinational Circuits • Output depends only on current input • Operate on data •

---

Example: ALU • Given the same input a combinational circuit will always produce the same output Logic Design Review • Sequential Circuits • Have “state” • Output depends on current input and previous outputs • Example: Register File • Output depends on the contents of the registers in the file

---

MIPS Register File • 32 32-bit registers • One write bus • Two read buses • Selection Inputs • RegWrite (write enable signal) • Reg. Source A • Reg. Source B • Reg. Destination Write Control Signals Every Clock Cycle • We do not show a write control signal when

---

a state element is written on every active clock edge. • Program Counter When Necessary • If a state element is not updated on every clock, then an explicit write control signal is required. • Register File Datapath Elements • Most elements have 32-bit wide inputs and outputs • Buses

---

Hence, we need separate instruction and data memories • Use multiplexers where alternate data sources are used for different instructions