the operation in the “op” field • address/immediate: address offset or immediate value • target address: target address of the jump instruction op target address 0 26 31 6 bits 26 bits op rs rt rd shamt funct 0 6 11 16 21 26 31 6 bits 6 bits 5

---

rs, rt • slt rd, rs, rt • ADD Immediate • addi rt, rs, imm16 • Load, Store • lw rt, rs, imm16 • sw rt, rs, imm16 • BRANCH • beq rs, rt, imm16 • JUMP: • j target op rs rt rd shamt funct 0 6 11 16

---

21 26 31 6 bits 6 bits 5 bits 5 bits 5 bits 5 bits op rs rt immediate 0 16 21 26 31 6 bits 16 bits 5 bits 5 bits op target address 0 26 31 6 bits 26 bits Instruction Execution • For every instruction: 1. Send

---

the program counter (PC) to the memory that contains the code and fetch the instruction from that memory. 1. Read one or two registers, using fields of the instruction to select the registers to read. For the load word instruction, we need to read only one register, but most other

---

instructions require that we read two registers. Instruction Execution • Fetch: • Get the next instruction: stored at PC Instruction Execution • Decode: • Opcode determines if the instruction is arithmetic/logical, memory logical, or branch. Instruction Execution • Update PC: PC target address or PC + 4 • If the

---

instruction is a branch, we have to calculate the target address • If the instruction is not a branch, the new PC will be PC + 4 Instruction Execution • Update PC: PC target address or PC + 4 • If the instruction is a branch, we have to calculate

---

the target address • If the instruction is not a branch, the new PC will be PC + 4 Instruction Execution • Execute: • Depending on instruction class, we use the ALU to calculate: • Arithmetic result • Memory address for load/store • Branch target address Instruction Execution • To

---

value to memory • Elements: • Register file • Sign extension unit • Data memory unit Datapath: Load Instruction Datapath: Store Instruction Branch Instructions beq $t1, $t2, offset • Read register operands • Compare operands • Use ALU, subtract and check Zero output • Calculate target address • Sign-extend displacement

---

• Shift left 2 places (word displacement) • Add to PC + 4 • Already calculated by instruction fetch Target Address Details • The base for the branch address calculation is the address of the instruction following the branch. • PC+4 • Memory is byte addressed • The offset field

---

must be shifted left 2 bits Branch Instructions Just re-routes wires Sign-bit wire replicated Branching beq $t1, $t2, offset • Branch is taken • When $t1 - $t2 = 0, the zero signal from the ALU • PC = PC + 4 + 4*offset • Branch is not taken •

---

PC = PC + 4 Datapath: Branch Jump Instructions • PC = PC[31-28] : Offset << 2 Single Datapath • All instructions executed in one clock cycle • Each datapath element can only do one function at a time • Any element needed more than once must be duplicated •