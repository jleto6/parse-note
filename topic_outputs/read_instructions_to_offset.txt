from that memory. 1. Read one or two registers, using fields of the instruction to select the registers to read. For the load word instruction, we need to read only one register, but most other instructions require that we read two registers. Instruction Execution • Fetch: • Get the next

---

be PC + 4 Instruction Execution • Execute: • Depending on instruction class, we use the ALU to calculate: • Arithmetic result • Memory address for load/store • Branch target address Instruction Execution • To read and write registers, we need a register file • R-types read two registers and

---

Multiplexer Y = S ? I1 : I0 A B Y + A B Y ALU F Adder Y = A + B Arithmetic/Logic Unit Y = F(A, B) Datapath Elements - Sequential Fetch Elements • Memory Unit • Program Counter • Adder R-Type Instructions • Read two register operands

---

• Perform arithmetic/logical operation • Write register result R-Type Instructions add $t1, $t2, $t3 • RW = 9 • RA = 10 • RB = 11 • ALUop = “add” Datapath: R-Type Instructions I-Type Instructions • Replace one read register, shamt, and funct with 16 bit constant • ALU requires

---

32-bit inputs • Sign-extend the 16 bit immediate • Fill with 0s if the constant is positive • Fill with 1s if the constant is negative • Choose between the second read registers and the sign extended constant. Datapath: I-Type Instructions Load/Store Instructions • lw $t1, offset($t2) • sw $t1,

---

offset($t2) • Compute memory address: $t2 + offset • Since offset is 16 bits, it needs to be extended to 32 bits Load/Store Instructions • Load: Read memory and update register • Store: Write register value to memory • Elements: • Register file • Sign extension unit • Data memory

---

unit Datapath: Load Instruction Datapath: Store Instruction Branch Instructions beq $t1, $t2, offset • Read register operands • Compare operands • Use ALU, subtract and check Zero output • Calculate target address • Sign-extend displacement • Shift left 2 places (word displacement) • Add to PC + 4 • Already

---

beq $t1, $t2, offset • Branch is taken • When $t1 - $t2 = 0, the zero signal from the ALU • PC = PC + 4 + 4*offset • Branch is not taken • PC = PC + 4 Datapath: Branch Jump Instructions • PC = PC[31-28] : Offset