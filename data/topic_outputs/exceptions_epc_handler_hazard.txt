Data hazard • Need to wait for previous instruction to complete its data read/write • Control hazard • Deciding on control action depends on previous instruction Structure Hazards • Conflict for use of a resource • In MIPS pipeline with a single memory • Load/store requires data access • Instruction

---

Forwarding (aka Bypassing) • Use result when it is computed • Don’t wait for it to be stored in a register • Requires extra connections in the datapath Forwarding • Forwarding: the result is passed forward from an earlier instruction to a later instruction. Load-Use Data Hazard • Can’t always

---

Subject to hazards • Structure, data, control • Instruction set design affects complexity of pipeline implementation Exceptions and Interrupts • “Unexpected” events requiring change in flow of control • Exception • Arises within the CPU • Examples: undefined opcode, overflow, syscall • Interrupt • From an external I/O controller Handling

---

Exceptions • In MIPS, exceptions managed by a System Control Coprocessor (CP0) • Save PC of offending (or interrupted) instruction • In MIPS: Exception Program Counter (EPC) • Save indication of the problem • In MIPS: Status register • 0000 – undefined instruction • 0180 – arithmetic overflow • Jump

---

to handler Handler Actions • Read cause, and transfer to relevant handler • Determine action required • If restartable • Take corrective action • use EPC to return to program • Otherwise • Terminate program • Report error using EPC Exceptions in a Pipeline • Another form of control hazard

---

• Consider overflow on add in EX stage add $1, $2, $1 • Prevent $1 from being overwritten • Complete previous instructions • Flush add and subsequent instructions • Set Cause and EPC register values • Transfer control to handler • Similar to mispredicted branch • Use much of the

---

same hardware Multiple Exceptions • Pipelining overlaps multiple instructions • Could have multiple exceptions at once • Simple approach: deal with exception from earliest instruction • Flush subsequent instructions Fallacies • Pipelining is easy • The basic idea is easy • The devil is in the details • e.g., detecting