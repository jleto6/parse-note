**Add**: This component adds 4 to its input, indicating the standard increment of the program counter (PC) for sequential execution. - **Middle Section**: - **Instruction Memory**: Addresses are read from the PC and passed to the "Instruction memory" to fetch instructions. - **Registers**: Options for reading data from two registers

---

instruction op target address 0 26 31 6 bits 26 bits op rs rt rd shamt funct 0 6 11 16 21 26 31 6 bits 6 bits 5 bits 5 bits 5 bits 5 bits op rs rt immediate 0 16 21 26 31 6 bits 16 bits 5

---

bits 5 bits MIPS Subset • Add, Subtract, AND, OR, SLT • add rd, rs, rt • sub rd, rs, rt • and rd, rs, rt • or rd, rs, rt • slt rd, rs, rt • ADD Immediate • addi rt, rs, imm16 • Load, Store • lw rt,

---

rs, imm16 • sw rt, rs, imm16 • BRANCH • beq rs, rt, imm16 • JUMP: • j target op rs rt rd shamt funct 0 6 11 16 21 26 31 6 bits 6 bits 5 bits 5 bits 5 bits 5 bits op rs rt immediate 0 16

---

21 26 31 6 bits 16 bits 5 bits 5 bits op target address 0 26 31 6 bits 26 bits Instruction Execution • For every instruction: 1. Send the program counter (PC) to the memory that contains the code and fetch the instruction from that memory. 1. Read one

---

• Decode: • Opcode determines if the instruction is arithmetic/logical, memory logical, or branch. Instruction Execution • Update PC: PC target address or PC + 4 • If the instruction is a branch, we have to calculate the target address • If the instruction is not a branch, the new

---

PC will be PC + 4 Instruction Execution • Update PC: PC target address or PC + 4 • If the instruction is a branch, we have to calculate the target address • If the instruction is not a branch, the new PC will be PC + 4 Instruction Execution

---

Instruction Branch Instructions beq $t1, $t2, offset • Read register operands • Compare operands • Use ALU, subtract and check Zero output • Calculate target address • Sign-extend displacement • Shift left 2 places (word displacement) • Add to PC + 4 • Already calculated by instruction fetch Target Address

---

Details • The base for the branch address calculation is the address of the instruction following the branch. • PC+4 • Memory is byte addressed • The offset field must be shifted left 2 bits Branch Instructions Just re-routes wires Sign-bit wire replicated Branching beq $t1, $t2, offset • Branch

---

0 1 ALUOp1 1 0 0 0 ALUOp0 0 0 0 1 Implementing Jumps • Jump uses word address • Update PC with concatenation of • Top 4 bits of old PC • 26-bit jump address • 00 • Need an extra control signal decoded from opcode 2 address 31:26