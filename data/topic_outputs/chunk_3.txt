Need an extra control signal decoded from opcode
2
address
31:26
25:0
Jump

Datapath With Jumps Added

Single-Cycle Implementation
• Every instruction begins execution on one clock edge and 
completes execution on the next clock edge.
• Clock cycle time must be at least as long as the longest 
instruction (load word).
• Cycle time = 
PC’s propagation time + 
Instruction Memory Access Time +
Register File Access Time  +
ALU Delay (address calculation)  +
Data Memory Access Time  +
Register File Setup Time  +
Clock Skew

Single-Cycle Implementation
• Every instruction begins execution on one clock edge and 
completes execution on the next clock edge.
• Clock cycle time must be at least as long as the longest 
instruction (load word).
• The cycle time for load is much longer than any other instruction

Single-Cycle Implementation
• Single-Cycle implementation is not practical
• Unable to implement more complex instructions
• Cannot make improves that will speed up the system unless those 
improvements are to load
• Violates the design principle of making the common case fast
• Some functional units must be duplicated, increasing hardware cost

Pipelining
• Pipelining is an implementation technique in which 
multiple instructions are overlapped in execution.  
• Pipelining is nearly universal.

Analogy for Pipelining: Laundry
• Nonpipelined approach:
1.
Place one dirty load of clothes in the washer.
2.
When the washer is finished, place the wet load in the dryer.
3.
When the dryer is finished, place the dry load on a table and fold.
4.
When folding is finished, put the clothes away.
• When the clothes are put away, the next load can begin.

Analogy for Pipelining: Laundry
• Pipelined approach:
1.
Place one dirty load (load A) of clothes in the washer. 
2.
When the washer is finished, place load A in the dryer and start a 
new load (load B) in the washer.
3.
When the dryer is finished, place load A on the table to fold, 
place load B in the dryer, and start a new load (load C) in the 
washer.
4.
When folding is finished, put away load A, fold load B, place load 
C in the dryer, start load D in the washer.

Analogy for Pipelining: Laundry

Pipelining Paradox
• One load of laundry still takes the same amount of time.
• The amount of time it takes to do many loads of laundry is 
shorter with pipelining.
• Pipelining improves throughput.

Pipelining Speedup
• If all the stages take about the same amount of time and 
there is enough work to do, then the speedup due to 
pipelining is roughly equal to the number of stages in the 
pipeline.
• Laundry Analogy: 
• 4 stages (washing, drying, folding, putting away)
• 20 loads pipelined would take about 5 times as long as 1 load
• 20 loads of sequential laundry takes 20 times as long as 1 load

MIPS Pipeline
1.
Fetch instruction from 
memory.
1.
Read registers while 
decoding the instruction. 
1.
Execute the operation or 
calculate an address.
1.
Access an operand in data 
memory.
1.
Write the result into a register.
• Instruction Fetch
(IF)
• Instruction Decode
(ID)
• Execution
(EX)
• Memory Access
(MEM)
• Write Back
(WB)

Pipeline Speedup
• If all stages are balanced
• i.e., all take the same time
• Time between instructionspipelined
=
Time between instructionsnonpipelined
Number of stages
• If not balanced, speedup is less
• Speedup due to increased throughput
• Latency (time for 