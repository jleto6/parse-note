increases
• Use direct mapped, but miss rate increases
• Decrease Miss Rate
• Make cache larger, but can increases hit time
• Add associativity, but can increase hit time
• Increase block size, but increases miss penalty
• Decrease Miss Penalty
• Reduce transfer time component of miss penalty
• Add another level of cache

The image is a diagram labeled "Datapath." Here's an analysis of it:

### Layout Description:
- **Main Components:** 
  - **Instruction Memory:** Positioned on the left, labeled "Instruction memory."
  - **Registers Block:** In the center, showing registers for storing data.
  - **ALU (Arithmetic Logic Unit):** Central component performing operations.
  - **Data Memory:** Placed on the right for data storage operations.
  - **Multiplexers (MUX):** Multiple instances are labeled "MUX" to select data paths.

### Detailed Elements:
- **Instruction Path:** Begins with reading the address from the "PC" (Program Counter). The address is directed to the "Instruction memory."
- **Controllers and Data Flow:**
  - "Read address" to "Instruction memory" to get instructions.
  - "Registers" block shows "Register 1" and "Register 2" for inputs, with an option to write data.
  - "Sign-extend" block is used to handle immediate values.
- **ALU Path:** 
  - Receives inputs from "Register 1" and the result of a "MUX" that selects either "Register 2" data or a "Sign-extend" output.
  - ALU performs operations defined by "ALU operation."
- **Data Memory:**
  - Data from ALU or to be written/read is processed through "Data memory," directed by "MemWrite" and "MemRead" controls.
- **Controls and Multiplexers:**
  - "MUX" instances at various points to control the flow using signals like "PCSrc," "ALUSrc," and paths for ALU results or memory data.

### Insights:
- **Sequential Process:** The datapath is designed to facilitate the flow of instructions and data through the CPU.
- **Control Signals:** Various control signals manage the reading, writing, and operation commands.
- **ALU Operations:** Highlights how different paths are selected for execution based on instructions and control inputs.
- **Memory Interaction:** Data and instructions are read from separate memories and controlled precisely through multiplexers.

This diagram represents a typical CPU datapath used in computer architecture to process instructions and handle data manipulation effectively.
PROCESSOR 
DATAPATH

Introduction
• MIPS ISA
• 3 Instruction Types
• R-type, I-type, J-type
• Datapath and Control Unit
• Simplified
• Pipelined
• Simple subset
• Memory reference: lw, sw
• Arithmetic/logical: 
add, addi, sub, and, or, slt
• Control transfer: 
beq, j

Instruction Format Review
• Three  instruction formats
• R-type
• I-type
• J-type
• Fields:
• op: operation of the instruction
• rs, rt, rd: source/destination register specifiers
• shamt: shift amount
• funct: selects variant of the operation in the “op” field
• address/immediate: address offset or immediate value
• target address: target address of the jump instruction 
op
target address
0
26
31
6 bits
26 bits
op
rs
rt
rd
shamt
funct
0
6
11
16
21
26
31
6 bits
6 bits
5 bits
5 bits
5 bits
5 bits
op
rs
rt
immediate
0
16
21
26
31
6 bits
16 bits
5 bits
5 bits

MIPS Subset
• Add, Subtract, AND, OR, SLT
• add rd, rs, rt
• sub rd, rs, rt
• and rd, rs, rt
• or rd, rs, rt
• slt rd, rs, rt
• ADD Immediate
• addi  rt, rs, imm16
• Load, Store
• lw rt, rs, imm16
• sw rt, rs, imm16
• BRANCH
• beq rs, rt, imm16
• JUMP:
• j  target
op
rs
rt
rd
shamt
funct
0
6
11
16
21
26
31
6 bits
6 bits
5 bits
5 bits
5 bits
5 