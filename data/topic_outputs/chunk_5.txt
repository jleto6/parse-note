increases
• Use direct mapped, but miss rate increases
• Decrease Miss Rate
• Make cache larger, but can increases hit time
• Add associativity, but can increase hit time
• Increase block size, but increases miss penalty
• Decrease Miss Penalty
• Reduce transfer time component of miss penalty
• Add another level of cache

The image is a diagram of a computer datapath.

### Layout and Components:
- **Instruction Memory:** Located at the bottom left, where instructions are fetched from the memory using a program counter (PC) and read address.
- **Add and MUX Components:** There are several MUXs and Add components for directing data flow.
- **Registers:** Two registers (Read register 1 and Read register 2) are used for storing operands.
- **ALU (Arithmetic Logic Unit):** Performs operations on data, with inputs from the MUX and output labeled ALU result.
- **Data Memory:** Reads or writes data based on ALU results and MemRead/MemWrite signals.
- **Sign-extend and Shift left:** Used for processing instruction fields for calculations in the ALU.
- **Control Signals:** Labels like RegWrite, ALUSrc, MemtoReg, MemRead, and MemWrite indicate control signals for data flow and operations.

### Insights:
- The diagram illustrates a single-cycle datapath typical of a processor, showing how data flows through the system when executing instructions.
- **PCSrc and ALUSrc MUXs** are used to select between different inputs based on control signals, influencing how the next address is determined.
- **Zero Output from ALU** is used to decide branch outcomes, which influences the PC update.
- **Sign-extend** and **shift left 2** help in preparing immediate values for ALU operations, particularly in branching and address calculations.
- **Control Signals** such as MemWrite and RegWrite highlight key control points for writing operations in either data memory or registers.

Overall, understanding this datapath is crucial for comprehending how a processor executes instructions and manages data flow across various components.
PROCESSOR 
DATAPATH

Introduction
• MIPS ISA
• 3 Instruction Types
• R-type, I-type, J-type
• Datapath and Control Unit
• Simplified
• Pipelined
• Simple subset
• Memory reference: lw, sw
• Arithmetic/logical: 
add, addi, sub, and, or, slt
• Control transfer: 
beq, j

Instruction Format Review
• Three  instruction formats
• R-type
• I-type
• J-type
• Fields:
• op: operation of the instruction
• rs, rt, rd: source/destination register specifiers
• shamt: shift amount
• funct: selects variant of the operation in the “op” field
• address/immediate: address offset or immediate value
• target address: target address of the jump instruction 
op
target address
0
26
31
6 bits
26 bits
op
rs
rt
rd
shamt
funct
0
6
11
16
21
26
31
6 bits
6 bits
5 bits
5 bits
5 bits
5 bits
op
rs
rt
immediate
0
16
21
26
31
6 bits
16 bits
5 bits
5 bits

MIPS Subset
• Add, Subtract, AND, OR, SLT
• add rd, rs, rt
• sub rd, rs, rt
• and rd, rs, rt
• or rd, rs, rt
• slt rd, rs, rt
• ADD Immediate
• addi  rt, rs, imm16
• Load, Store
• lw rt, rs, imm16
• sw rt, rs, imm16
• BRANCH
• beq rs, rt, imm16
• JUMP:
• j  target
op
rs
rt
rd
shamt
funct
0
6
11
16
21
26
31
6 bits
6 bits
5 bits
5 bits
5 bits
5 bits
op
rs
rt
immediate
0
16
21
26
31
6 bits
16 bits
5 bits
5 bits
op
target address
0
26
31
6 bits
26 bits

Instruction Execution
• For every instruction:
1.
Send the program counter (PC) to the memory that contains the 
code and fetch the instruction from that memory.
1.
Read one or two registers, using fields of the instruction to select 
the registers to read. For the load word instruction, we need to 
read only one register, but most 