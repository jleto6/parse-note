increases
• Use direct mapped, but miss rate increases
• Decrease Miss Rate
• Make cache larger, but can increases hit time
• Add associativity, but can increase hit time
• Increase block size, but increases miss penalty
• Decrease Miss Penalty
• Reduce transfer time component of miss penalty
• Add another level of cache

The image is a block diagram of a datapath used in computer architecture. Here is a detailed analysis:

### Layout Description:

1. **Major Components:**
   - **PC (Program Counter):** Represents the address of the current instruction.
   - **Instruction Memory:** Reads the instruction based on the address from the PC.
   - **Registers:** Contains Read register 1, Read register 2, Write register, and Write data.
   - **ALU (Arithmetic Logic Unit):** Performs calculations and logical operations.
   - **Data Memory:** Handles read and write operations.

2. **Control Signals:**
   - **RegWrite, MemWrite, MemRead:** Controls writing and reading operations.
   - **ALUSrc, MemtoReg, PCSrc:** Various multiplexer control signals.
   - **ALU operation:** Determines the operation performed by the ALU.

3. **Data Flow:**
   - Data is fetched from instruction memory based on the PC.
   - Instruction is decoded, and operands are fetched from the registers.
   - ALU performs operations based on control signals.
   - Results can be stored back in registers or written to data memory.

### Data Flow Description:

- The **PC** provides an address to the **Instruction Memory** which fetches the instruction.
- The **Registers** block splits into registering reads and writes, with retrieved values entering the ALU.
- The **ALU** performs the required operations, influenced by control inputs, such as immediate calculation or data memory addressing.
- Results from ALU can go to **Data Memory** if required and are again used in a write-back stage to store results in the registers.
- Multiplexers (MUX) are used to select between different data paths based on control signals, altering the flow of data based on operation needs.

### Insights:
- The diagram represents a typical processor data path capable of handling immediate values, arithmetic operations, and memory instructions.
- By adjusting control signals, the data path can perform various operations, making it essential for execution in the instruction cycle.
- The presence of multiplexers indicates flexibility in data handling, providing multiple operation pathways based on control requirements.
- The simplicity implies a basic or educational example of computer architecture, suitable for explaining fundamental concepts.

This diagram serves as a foundational representation of how data flows through a simplified CPU during command execution, reflecting the crucial role of control signals in directing operations.
PROCESSOR 
DATAPATH

Introduction
• MIPS ISA
• 3 Instruction Types
• R-type, I-type, J-type
• Datapath and Control Unit
• Simplified
• Pipelined
• Simple subset
• Memory reference: lw, sw
• Arithmetic/logical: 
add, addi, sub, and, or, slt
• Control transfer: 
beq, j

Instruction Format Review
• Three  instruction formats
• R-type
• I-type
• J-type
• Fields:
• op: operation of the instruction
• rs, rt, rd: source/destination register specifiers
• shamt: shift amount
• funct: selects variant of the operation in the “op” field
• address/immediate: address offset or immediate value
• target address: target address of the jump instruction 
op
target address
0
26
31
6 