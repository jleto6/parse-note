**Binary Conversions**

**In the modern world,** we use decimal, or base 10, notation to represent integers. We can represent numbers using any base b, where b is a positive integer greater than 1.

**Base 10:**
For example, we write 965, this can be translated as: 9·10^2 + 6·10^1 + 5·10^0

**Base b:**
- Let b be a positive integer greater than 1. Then, n is a positive integer. It can be expressed uniquely in the form n, where k is a nonnegative integer and a_k, a_k-1, ..., a_1, a_0 are nonnegative integers less than b.
- This representation of n is called the base b expansion of n and can be denoted by a_k a_k-1 ... a_1 a_0ⱼ

**Binary Operations:**
- Computers represent integers and do arithmetic with binary (base 2) expansions of integers. In these expansions, the only digits used are 0 and 1.
- Example: What is the decimal expansion of the integer that has (11011)_2 as its binary expansion?
  - Solution: (11011)_2
    - 1·2^4 + 1·2^3 + 0·2^2 + 1·2^1 + 1·2^0
    - 16 + 8 + 0 + 2 + 1
    - 27

**Base Conversion:**
- To construct the base b expansion of the integer n, divide n by b to obtain a quotient q and a remainder: n = b·q + a_0, where a_0 < b.
- Next, divide q by b to get the rightmost digit in the base b expansion of n.
- Continue, by successively dividing the quotient by b, obtaining the corresponding remainders as the remainder. The process terminates when the quotient is 0.
The image contains handwritten notes on the topic of "Caches." Here is the transcribed text:

---

**Caches**

In an ideal computing system there would be unlimited fast memory access. Lower such a system is not practically achievable. Instead, a memory hierarchy provides the illusion of a large amount of fast memory by organizing different types of storage to optimize speed and access.

The principal of locality refers to the observation that programs tend to access only a small portion of their address space at any given time, which is crucial to optimizing the memory hierarchy. There are two main types of locality:

1. **Temporal locality**: Refers to the tendency of programs to access the same memory locations repeatedly within a short period. For example, instructions in loops and induction variables.

2. **Special locality**: Denotes the likelihood of accessing memory locations close together during memory access. This occurs in sequential instruction access and accessing array data. 

Understanding these principals helps in designing cache systems and hardware to enhance performance.

**Memory Hierarchy Levels**

- Cache levels include smaller, faster memory that is closer to the processor.
- Data moves through the hierarchy from frequent use and shorter times (upper levels, small size, expensive) to less frequently accessed and cheaper space (like SSD or disk).
- From memory (DRAM) and then to smaller, faster cache (SRAM) near the CPU.
- Data is moved between levels in blocks, which may multiple words. This is a key concept in managing memory transitions.
- Caches are used to store frequently accessed data closer to the processor, minimizing access times and improving speed.

Cache memory is the closest level of memory hierarchy to the CPU. It serves to supply the most frequently or recently accessed data.

A hit occurs when accessed data is present in the upper memory level, while a miss occurs when it is not. These hits and misses are key performance measures for caches. In this way, caches form an important part of any memory hierarchy designed to optimize computing performance.

---
Here is the transcription of the handwritten notes:

---

**Karnaugh Maps**

Truth tables are used to completely specify a combinational hardware element, commonly called a logic block. A logic block with n inputs has 2^n entries in the truth table.

Karnaugh Maps (K-Maps) are used to simplify boolean expressions derived from truth tables. Each cell in a K-Map corresponds to a row in the truth table, and groups of cells are used to minimize logic functions.
- Group size must be powers of 2. (1, 2, 4, 8)
- "Wraparound grouping" is allowed, connecting opposite edges of the map.
- "Don't-care" conditions (X) can be used to form larger groups for simplification.

---
